#use "code-gen.ml";;

let file_to_string f =
  let ic = open_in f in
  let s = really_input_string ic (in_channel_length ic) in
  close_in ic;
  s;;

let string_to_asts s = List.map Semantics.run_semantics
                         (Tag_Parser.tag_parse_expressions
                            (Reader.read_sexprs s));;
                            
(*updatd in code gen too*)
let primitive_names_to_labels =  ["boolean?", "is_boolean"; "float?", "is_float"; "integer?", "is_integer"; "pair?", "is_pair";
   "null?", "is_null"; "char?", "is_char"; "vector?", "is_vector"; "string?", "is_string";
   "procedure?", "is_procedure"; "symbol?", "is_symbol"; "string-length", "string_length";
   "string-ref", "string_ref"; "string-set!", "string_set"; "make-string", "make_string";
   "vector-length", "vector_length"; "vector-ref", "vector_ref"; "vector-set!", "vector_set";
   "make-vector", "make_vector"; "symbol->string", "symbol_to_string"; 
   "char->integer", "char_to_integer"; "integer->char", "integer_to_char"; "eq?", "is_eq";
   "+", "bin_add"; "*", "bin_mul"; "-", "bin_sub"; "/", "bin_div"; "<", "bin_lt"; "=", "bin_equ" ; "cdr" ,"cdr" ; "car", "car" ; "cons", "cons" ;"set-car!" , "set_car_asm" ;"set-cdr!" , "set_cdr_asm" 
  ; "apply" , "apply_asm" (* you can add yours here *)];;

(*"car","car" ; "cdr","cdr" ; "cons","cons"]*)

let get_first (x,y,z) = x
let get_second (x,y,z) = y
let get_third (x,y,z) = z


let rec find_adress_of  newList const = match const with
| Void -> "const_tbl + 0"
| Sexpr(sexpr) -> let first = (get_first(List.hd newList)) in
                  let address =  (get_second(List.hd newList))in
                  match first with
                  | Void -> (find_adress_of (List.tl newList) const)
                  | Sexpr(s) -> if (sexpr_eq s sexpr) then "const_tbl +" ^ (string_of_int address)
                               else (find_adress_of (List.tl newList) const);;

let rec find_fvar_adress fvars v  = match fvars with
  | [] -> "fvar_tbl"
  | hd :: tl -> let var = (fst (List.hd fvars)) in
                let i = (snd (List.hd fvars)) in 
                if (v = var) then "fvar_tbl + " ^ (string_of_int i) ^ " * WORD_BYTES"
                else (find_fvar_adress tl v);;



  (* let make_constant (c, (a, s)) = s in*)

let make_prologue consts_tbl fvars_tbl =
  let get_const_address const = (find_adress_of  consts_tbl const) in
  let get_fvar_address const = (find_fvar_adress fvars_tbl const) in
  let make_primitive_closure (prim, label) =
"    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, " ^ label  ^ ")
    mov [" ^ (get_fvar_address prim)  ^ "], rax" in
  let make_constant (c, a, s) = s in
"
;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include \"compiler.s\"

section .bss
malloc_pointer:
    resq 1

section .data
const_tbl:
" ^ (String.concat "\n" (List.map make_constant consts_tbl)) ^ "

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS " ^ get_const_address Void ^ "
%define SOB_NIL_ADDRESS " ^ get_const_address (Sexpr Nil) ^ "
%define SOB_FALSE_ADDRESS " ^ get_const_address (Sexpr (Bool false)) ^ "
%define SOB_TRUE_ADDRESS " ^ get_const_address (Sexpr (Bool true)) ^ "
%define sob_void " ^ get_const_address Void ^ "

fvar_tbl:
" ^ (String.concat "\n" (List.map (fun _ -> "dq T_UNDEFINED") fvars_tbl)) ^ "

global main
section .text
main:
    ;; set up the heap
    mov rdi, GB(4)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0
    push qword SOB_NIL_ADDRESS
    push qword T_UNDEFINED
    push rsp

    call code_fragment
    add rsp, 4*8
    ret
    code_fragment:
    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we emulate the missing (define ...) expressions
    ;; for all the primitive procedures.
" ^ (String.concat "\n" (List.map make_primitive_closure primitive_names_to_labels)) ^ "
 
";;

let rec add_funcs list1 list2  = match list2 with 
| [] -> list1
| e :: tl  -> (add_funcs (List.append list1 [((fst e), (List.length  list1) )]) tl) ;;

let epilogue = "";;


(*     test    this shuld be deleted in the near future   *)

(*string_to_asts "'#()"*)


(*     test       *)


exception X_missing_input_file;;
try
  let infile = Sys.argv.(1) in
  let code =  (file_to_string "stdlib.scm") ^ (file_to_string infile) in
  let asts = string_to_asts code in
  let consts_tbl = Code_Gen.make_consts_tbl asts in
  let fvars_tbl = Code_Gen.make_fvars_tbl asts in
  let generate = Code_Gen.generate consts_tbl fvars_tbl in
  let code_fragment = String.concat "\n\n"
                        (List.map
                           (fun ast -> (generate ast 0) ^ "\n    call write_sob_if_not_void")
                           asts) in
  let provided_primitives = file_to_string "prims.s" in
                   
  print_string ((make_prologue consts_tbl (add_funcs fvars_tbl primitive_names_to_labels)  ) ^
  code_fragment ^ "\n ret \n" ^
    provided_primitives ^ "\n" ^ epilogue)

with Invalid_argument(x) -> raise X_missing_input_file;;

